plugins {
	id 'org.springframework.boot' version '2.2.4.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id "org.hidetake.swagger.generator" version "2.18.1"
	id "org.sonarqube" version "2.7"
	id 'jacoco'
	
	id 'com.google.cloud.tools.jib' version '1.7.0'
	id "com.palantir.docker" version "0.22.1"
}

apply plugin: "org.hidetake.swagger.generator"
apply plugin: "jacoco"
apply plugin: 'com.palantir.docker'

group = 'com.trustyreviews.reviewservice'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "Hoxton.SR1")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}

dependencies {
	// https://mvnrepository.com/artifact/org.sonarsource.scanner.maven/sonar-maven-plugin
	compile group: 'org.sonarsource.scanner.maven', name: 'sonar-maven-plugin', version: '3.7.0.1746'
	
	// https://mvnrepository.com/artifact/org.ehcache/ehcache
	compile group: 'org.ehcache', name: 'ehcache', version: '3.8.1'
	
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	
	implementation('io.springfox:springfox-swagger2:2.9.2') 
	
	implementation('io.springfox:springfox-swagger-ui:2.9.2')
	
	// https://mvnrepository.com/artifact/io.swagger.core.v3/swagger-annotations
 	implementation 'io.swagger.core.v3:swagger-annotations:2.0.9'
 	
 	swaggerCodegen 'io.swagger:swagger-codegen-cli:2.3.1'
 	// https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-openfeign
	//implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:2.1.3.RELEASE'
	
	
	// https://mvnrepository.com/artifact/io.github.openfeign/feign-jackson
	implementation 'io.github.openfeign:feign-jackson:10.5.1'
	
	compile 'org.mapstruct:mapstruct:1.3.0.Final'

    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.0.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.3.0.Final' 
    
	// https://mvnrepository.com/artifact/org.mockito/mockito-core
	testCompile group: 'org.mockito', name: 'mockito-core', version: '3.1.0'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
	jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}


compileJava {
options.setAnnotationProcessorGeneratedSourcesDirectory(file(".generatedsources/src/main/java"))
}

sourceSets {

main.java.srcDirs+=["$projectDir/.generatedsources/src/main/java"]
}

swaggerSources {
	jukeboxsettingprofilev1 {
	
		inputFile = file('src/main/swagger/v1/SwaggerJukeBox.yaml')
	
		code	{
				language = 'spring'
				outputDir = file("${project.projectDir}/.generatedsources")
				wipeOutputDir = false
				
	//Validate YAML before code generation
				dependsOn validation
				components = ['models']
				
				}

	}
}

//compileJava.dependsOn swaggerSources.jukeboxsettingprofilev1.code

/*
sourceSets{
	main.java.srcDirs +=["${swaggerSources.jukeboxsettingprofilev1.code.outputDir}/src/main/java"]
}*/

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

docker {
    name "algoritmyk/${bootJar.baseName}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}